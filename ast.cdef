# CDEF file for lang

Program ==> *Outermost

Outermost:Out_enum_define ==> Enum_define
Outermost:Out_decl ==> Decl
Outermost:Out_procedure ==> Procedure
Outermost:Out_struct_define ==> Struct_define

Enum_define ==> Primitive SymName *SymName
#const, assign, one dimention, second dimention
Decl:Decl_variable ==> Primitive Expr Expr *SymName Type *Expr
Decl:Decl_function ==> Type SymName *Decl
Procedure ==> Type SymName *Decl *PContent Return_stat
Struct_define ==> SymName *Decl
Call ==> SymName *Expr
Case ==> Expr *Stat_can_return

PContent:PProcedure ==> Procedure
PContent:PStat ==> Stat

Init:Init_new ==> Type SymName Expr
Init:Init_old ==> SymName Expr

Stat_can_return:NStat ==> Stat
Stat_can_return:RStat ==> Return_stat

Stat:Assignment ==> Lhs Expr
Stat:String_assignment ==> Lhs StringPrimitive
Stat:Function_assignment ==> Lhs Call

Stat:SIncre ==> Incre
Stat:Function_call ==> Call
Stat:If_no_else ==> Expr *Stat_can_return 
Stat:If_with_else ==> Expr *Stat_can_return *Stat_can_return 
Stat:While_loop ==>  Expr *Stat_can_return 
Stat:Do_while ==> Expr *Stat_can_return 
Stat:For_loop ==> Init Expr Incre *Stat
Stat:Switch ==> Expr *Case *Stat_can_return
Stat:Break ==>
Stat:Continue ==>
Stat:Stat_struct_define ==> Struct_define
Stat:Stat_enum_define ==> Enum_define
Stat:Stat_decl ==> Decl

Return_stat:Return ==> Expr

Type:TInt ==>
Type:TChar ==>
Type:TBool ==>
Type:TShort ==>
Type:TVoid ==>
Type:TLong ==>
Type:TStruct ==> SymName
Type:TEnum ==> SymName

Type:TCharPtr ==>
Type:TIntPtr ==>
Type:TBoolPtr ==>
Type:TShortPtr ==>
Type:TVoidPtr ==>
Type:TLongPtr ==>


Type:TIntArray ==> Primitive
Type:TCharArray ==> Primitive
Type:TBoolArray ==> Primitive
Type:TShortArray ==> Primitive
Type:TLongArray ==> Primitive

Type:TTDIntArray ==> Primitive Primitive
Type:TTDCharArray ==> Primitive Primitive
Type:TTDBoolArray ==> Primitive Primitive
Type:TTDShortArray ==> Primitive Primitive
Type:TTDLongArray ==> Primitive Primitive


Type:TString ==>
Type:No_type ==>

List ==> *Expr


Incre:Incre_op ==> Opassign
Incre:Incre_t_add ==> Lhs
Incre:Incre_t_min ==> Lhs
Incre:Incre_add_t ==> Lhs
Incre:Incre_min_t ==> Lhs

Opassign:And_assign ==> Lhs Expr
Opassign:Xor_assign ==> Lhs Expr
Opassign:Or_assign ==> Lhs Expr
Opassign:Sl_assign ==> Lhs Expr
Opassign:Sr_assign ==> Lhs Expr
Opassign:Times_assign ==> Lhs Expr
Opassign:Div_assign ==> Lhs Expr
Opassign:Rem_assign ==> Lhs Expr
Opassign:Add_assign ==> Lhs Expr
Opassign:Minus_assign ==> Lhs Expr


Expr:And ==> Expr Expr
Expr:Times ==> Expr Expr
Expr:ArithAnd ==> Expr Expr
Expr:ArithOr ==> Expr Expr
Expr:ArithXor ==> Expr Expr
Expr:Rem ==> Expr Expr
Expr:ShiftL ==> Expr Expr
Expr:ShiftR ==> Expr Expr
Expr:Div ==> Expr Expr
Expr:Compare ==> Expr Expr
Expr:Gt ==> Expr Expr
Expr:Gteq ==> Expr Expr
Expr:Lt ==> Expr Expr
Expr:Lteq ==> Expr Expr
Expr:Minus ==> Expr Expr
Expr:Noteq ==> Expr Expr
Expr:Or ==> Expr Expr
Expr:Plus ==> Expr Expr
Expr:Not ==> Expr
Expr:Uminus ==> Expr
Expr:Ident ==> SymName
Expr:ArrayAccess ==> SymName Expr
Expr:ArrayDoubleAccess ==> SymName Expr Expr
Expr:DotAccess ==> SymName SymName
Expr:ArrowAccess ==> SymName SymName
Expr:IntLit ==> Primitive
Expr:CharLit ==> Primitive
Expr:BoolLit ==> Primitive
Expr:StringLit ==> StringPrimitive
Expr:NullLit ==> 
Expr:Deref ==> Expr
Expr:AddressOf ==> Lhs
Expr:EList ==> *SymName
Expr:ETDList ==> *List
Expr:ECall ==> SymName *SymName

Lhs:Variable ==> SymName
Lhs:DerefVariable ==> SymName
Lhs:ArrayElement ==> SymName Expr
Lhs:ArrayDoubleElement ==> SymName Expr Expr
Lhs:ArrowElement ==>  SymName SymName
Lhs:DotElement ==>  SymName SymName

# these classes should not be generated automagically
SymName external "symtab.hpp"
Primitive external "primitive.hpp"
StringPrimitive external "primitive.hpp"
