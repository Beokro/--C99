%{
    #include <cstdio>
    #include <cstdlib>

    #include "ast.hpp"
    #include "primitive.hpp"
    #include "symtab.hpp"

    #define YYDEBUG 1

    extern Program_ptr ast;
    int yylex(void);
    void yyerror(const char *);
%}

/* Enables verbose error messages */
%error-verbose

%token BOOL CHAR INT FLOAT DOUBLE SHORT UNSIGNED SIGNED VOID CONST STRING LONG
%token SWITCH BREAK ENUM CASE CONTINUE GOTO SIZEOF DEFAULT STRUCT
%token DO TYPEDEF IF FOR ELSE WHILE RETURN NULLX TRUE FALSE
%left ','
%right '=' ADDASSIGN MINUSASSIGN TIMESASSIGN DIVASSIGN REMASSIGN SLASSIGN SRASSIGN ANDASSIGN XORASSIGN ORASSIGN
%left OR
%left AND
%left '|'
%left '^'
%left '&'
%left EQ NEQ
%left '<' '>'  LE GE
%left SR SL
%left '+' '-'
%left '*' '/' '%'
%right SECOND ADDADD MINUSMINUS
%left  FIRST '(' ')' '[' ']' '.' ARROW  

%%
s			: outermosts
        		;

outermosts		: outermosts outermost
			|
			;

outermost 		: decl
			| procedure
			| structDefine
			; 	
				

procedures  	 	: procedures procedure
            		|
            		;

procedure   		: type ID '(' parameter ')'  '{' procedureContents returnStmt '}'
            		;

procedureContents	: procedureContents procedureContent
			|
			;

procedureContent	: decl
			| procedure
			| stmt
			;


structDefine 		: STRUCT ID '{' decls '}'

decls 			: decls decl
			| 
			; 

decl    		: type ID optionAssign declFollow ';'
        		;

declFollow		: ',' ID optionAssign declFollow
			|
			;

optionAssign 		: '=' exprs
			|
			;

stmts  			: stmts stmt
        		|

stmtsCanReturn 		: stmtsCanReturn stmtCanReturn
			|
			;

stmtCanReturn 		: stmt
			| returnStmt
			;

stmt   			: lhs '=' exprs ';'
			
        		| lhs '=' STRINGV ';'

        		| lhs '=' ID '(' arguments ')' ';'

        		| IF '(' exprs ')'  '{' stmtsCanReturn '}' ELSE '{' stmtsCanReturn '}'

        		| IF '(' exprs ')'  '{' stmtsCanReturn '}'

        		| WHILE '(' exprs ')' '{' stmts '}'

			| FOR '('stmt ; exprs ; stmt ')' '{ stmts '}'

			| DO '{' stmts '}' WHILE '(' exprs ')'

			| SWITCH '(' exprs ')' '{'cases DEFAULT ':' stmts '}'

			| BREAK

			| term ADDADD
			
			| term MINUSMINUS
			
			| ADDADD term

			| MINUSMINUS term

			| CONTINUE

        		;

cases 			: cases CASE ':' stmts 
			| 
			;



returnStmt  		: RETURN exprs ';'

            		;


			exprs   : exprs '*' exprs

			| exprs '/' exprs

			| exprs '+' exprs

			| exprs '-' exprs

			| exprs EQ  exprs

			| exprs GE  exprs

			| exprs LE  exprs

			| exprs NEQ exprs

			| exprs '>' exprs

			| exprs '<' exprs

			| exprs AND exprs

			| exprs OR  exprs

			| exprs SR  exprs

			| exprs SL  exprs

			| exprs ANDASSIGN  exprs

			| exprs XORASSIGN  exprs

			| exprs ORASSIGN  exprs

			| exprs SLASSIGN  exprs

			| exprs SRASSIGN  exprs

			| exprs TIMESASSIGN  exprs

			| exprs DIVASSIGN  exprs

			| exprs REMASSIGN  exprs

			| exprs ADDASSIGN  exprs

			| exprs MINUSASSIGN  exprs

			| term

			;


term    		: ID sbarket

         		| ID

        		| literal

        		| '(' exprs ')'

        		| '|' exprs '|'

        		| '!' exprs                     %prec SECOND

        		| '*' exprs                     %prec SECOND

        		| '-' exprs                     %prec SECOND

        		| '+' exprs                     %prec SECOND

       			| '&' lhs                     	%prec SECOND

        		;

lhs     		: ID sbarket

        		| ID

        		| '^' ID

        		;

literal 		: NUMBER

        		| CHARV

        		| TRUE

        		| FALSE

        		| NULLX

        		;

sbarket 		: '[' exprs ']'

        		;




type  			: BOOL
        		| INT    
        		| CHAR       
        		| SHORT    
        		| UNSIGNED
			| SIGNED
			| VOID
			| LONG
			| LONG LONG
			| STRUCT ID
			| STRING
			| BOOL '*'
        		| INT '*'    
        		| CHAR '*'       
        		| SHOR '*'   
        		| UNSIGNED '*'
			| SIGNED '*'
			| VOID '*'
			| LONG '*'
			| LONG LONG '*'
			| STRUCT ID '*'     
        		| BOOL '[' expr ']'
        		| INT  '[' expr ']'    
        		| CHAR '[' expr ']'       
        		| SHORT '[' expr ']'    
        		| UNSIGNED '[' expr ']'
			| SIGNED '[' expr ']'
			| VOID '[' expr ']'
			| LONG '[' expr ']'
			| LONG LONG '[' expr ']'
			;




arguments : exprs argumentsPrime

        |

        ;

argumentsPrime: ',' exprs argumentsPrime

        |

        ;


parameter: type ID idPrime 

        |

        ;


idPrime : ',' type ID idPrime

        |

        ;



%%

/** You shall not pass!
 *  You should not  have to do or edit anything past this.
 */

extern int yylineno;

void yyerror(const char *s)
{
    fprintf(stderr, "%s at line %d\n", s, yylineno);
    return;
}
