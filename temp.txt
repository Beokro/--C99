void visitProgramImpl(ProgramImpl *p) { draw("ProgramImpl", p); }
void visitOut_enum_define(Out_enum_define *p) { draw("Out_enum_define", p); }
void visitOut_decl(Out_decl *p) { draw("Out_decl", p); }
void visitOut_procedure(Out_procedure *p) { draw("Out_procedure", p); }
void visitOut_struct_define(Out_struct_define *p) { draw("Out_struct_define", p); }
void visitEnum_defineImpl(Enum_defineImpl *p) { draw("Enum_defineImpl", p); }
void visitDeclImpl(DeclImpl *p) { draw("DeclImpl", p); }
void visitProcedureImpl(ProcedureImpl *p) { draw("ProcedureImpl", p); }
void visitStruct_defineImpl(Struct_defineImpl *p) { draw("Struct_defineImpl", p); }
void visitCallImpl(CallImpl *p) { draw("CallImpl", p); }
void visitCaseImpl(CaseImpl *p) { draw("CaseImpl", p); }
void visitPProcedure(PProcedure *p) { draw("PProcedure", p); }
void visitPStat(PStat *p) { draw("PStat", p); }
void visitInit_new(Init_new *p) { draw("Init_new", p); }
void visitInit_old(Init_old *p) { draw("Init_old", p); }
void visitNStat(NStat *p) { draw("NStat", p); }
void visitRStat(RStat *p) { draw("RStat", p); }
void visitAssignment(Assignment *p) { draw("Assignment", p); }
void visitString_assignment(String_assignment *p) { draw("String_assignment", p); }
void visitFunction_assignment(Function_assignment *p) { draw("Function_assignment", p); }
void visitFunction_call(Function_call *p) { draw("Function_call", p); }
void visitIf_no_else(If_no_else *p) { draw("If_no_else", p); }
void visitIf_with_else(If_with_else *p) { draw("If_with_else", p); }
void visitWhile_loop(While_loop *p) { draw("While_loop", p); }
void visitDo_while(Do_while *p) { draw("Do_while", p); }
void visitFor_loop(For_loop *p) { draw("For_loop", p); }
void visitSwitch(Switch *p) { draw("Switch", p); }
void visitBreak(Break *p) { draw("Break", p); }
void visitContinue(Continue *p) { draw("Continue", p); }
void visitStat_struct_define(Stat_struct_define *p) { draw("Stat_struct_define", p); }
void visitStat_enum_define(Stat_enum_define *p) { draw("Stat_enum_define", p); }
void visitStat_decl(Stat_decl *p) { draw("Stat_decl", p); }
void visitReturn(Return *p) { draw("Return", p); }
void visitTInt(TInt *p) { draw("TInt", p); }
void visitTChar(TChar *p) { draw("TChar", p); }
void visitTBool(TBool *p) { draw("TBool", p); }
void visitTShort(TShort *p) { draw("TShort", p); }
void visitTVoid(TVoid *p) { draw("TVoid", p); }
void visitTLong(TLong *p) { draw("TLong", p); }
void visitTStruct(TStruct *p) { draw("TStruct", p); }
void visitTEnum(TEnum *p) { draw("TEnum", p); }
void visitTCharPtr(TCharPtr *p) { draw("TCharPtr", p); }
void visitTIntPtr(TIntPtr *p) { draw("TIntPtr", p); }
void visitTBoolPtr(TBoolPtr *p) { draw("TBoolPtr", p); }
void visitTShortPtr(TShortPtr *p) { draw("TShortPtr", p); }
void visitTVoidPtr(TVoidPtr *p) { draw("TVoidPtr", p); }
void visitTLongPtr(TLongPtr *p) { draw("TLongPtr", p); }
void visitTIntArray(TIntArray *p) { draw("TIntArray", p); }
void visitTCharArray(TCharArray *p) { draw("TCharArray", p); }
void visitTBoolArray(TBoolArray *p) { draw("TBoolArray", p); }
void visitTShortArray(TShortArray *p) { draw("TShortArray", p); }
void visitTLongArray(TLongArray *p) { draw("TLongArray", p); }
void visitTString(TString *p) { draw("TString", p); }
void visitNo_type(No_type *p) { draw("No_type", p); }
void visitIncre_op(Incre_op *p) { draw("Incre_op", p); }
void visitIncre_t_add(Incre_t_add *p) { draw("Incre_t_add", p); }
void visitIncre_t_min(Incre_t_min *p) { draw("Incre_t_min", p); }
void visitIncre_add_t(Incre_add_t *p) { draw("Incre_add_t", p); }
void visitIncre_min_t(Incre_min_t *p) { draw("Incre_min_t", p); }
void visitAnd_assign(And_assign *p) { draw("And_assign", p); }
void visitXor_assign(Xor_assign *p) { draw("Xor_assign", p); }
void visitOr_assign(Or_assign *p) { draw("Or_assign", p); }
void visitSl_assign(Sl_assign *p) { draw("Sl_assign", p); }
void visitSr_assign(Sr_assign *p) { draw("Sr_assign", p); }
void visitTimes_assign(Times_assign *p) { draw("Times_assign", p); }
void visitDiv_assign(Div_assign *p) { draw("Div_assign", p); }
void visitRem_assign(Rem_assign *p) { draw("Rem_assign", p); }
void visitAdd_assign(Add_assign *p) { draw("Add_assign", p); }
void visitMinus_assign(Minus_assign *p) { draw("Minus_assign", p); }
void visitAnd(And *p) { draw("And", p); }
void visitTimes(Times *p) { draw("Times", p); }
void visitArithAnd(ArithAnd *p) { draw("ArithAnd", p); }
void visitArithOr(ArithOr *p) { draw("ArithOr", p); }
void visitArithXor(ArithXor *p) { draw("ArithXor", p); }
void visitRem(Rem *p) { draw("Rem", p); }
void visitSL(SL *p) { draw("SL", p); }
void visitSR(SR *p) { draw("SR", p); }
void visitDiv(Div *p) { draw("Div", p); }
void visitCompare(Compare *p) { draw("Compare", p); }
void visitGt(Gt *p) { draw("Gt", p); }
void visitGteq(Gteq *p) { draw("Gteq", p); }
void visitLt(Lt *p) { draw("Lt", p); }
void visitLteq(Lteq *p) { draw("Lteq", p); }
void visitMinus(Minus *p) { draw("Minus", p); }
void visitNoteq(Noteq *p) { draw("Noteq", p); }
void visitOr(Or *p) { draw("Or", p); }
void visitPlus(Plus *p) { draw("Plus", p); }
void visitNot(Not *p) { draw("Not", p); }
void visitUminus(Uminus *p) { draw("Uminus", p); }
void visitIdent(Ident *p) { draw("Ident", p); }
void visitArrayAccess(ArrayAccess *p) { draw("ArrayAccess", p); }
void visitArrayDoubleAccess(ArrayDoubleAccess *p) { draw("ArrayDoubleAccess", p); }
void visitDotAccess(DotAccess *p) { draw("DotAccess", p); }
void visitArrowAccess(ArrowAccess *p) { draw("ArrowAccess", p); }
void visitIntLit(IntLit *p) { draw("IntLit", p); }
void visitCharLit(CharLit *p) { draw("CharLit", p); }
void visitBoolLit(BoolLit *p) { draw("BoolLit", p); }
void visitNullLit(NullLit *p) { draw("NullLit", p); }
void visitDeref(Deref *p) { draw("Deref", p); }
void visitAddressOf(AddressOf *p) { draw("AddressOf", p); }
void visitVariable(Variable *p) { draw("Variable", p); }
void visitDerefVariable(DerefVariable *p) { draw("DerefVariable", p); }
void visitArrayElement(ArrayElement *p) { draw("ArrayElement", p); }
void visitArrayDoubleElement(ArrayDoubleElement *p) { draw("ArrayDoubleElement", p); }
void visitArrowElement(ArrowElement *p) { draw("ArrowElement", p); }
void visitDotElement(DotElement *p) { draw("DotElement", p); }
void visitSymNameImpl(SymNameImpl *p) { draw("SymNameImpl", p); }
void visitPrimitiveImpl(PrimitiveImpl *p) { draw("PrimitiveImpl", p); }
void visitStringPrimitiveImpl(StringPrimitiveImpl *p) { draw("StringPrimitiveImpl", p); }
